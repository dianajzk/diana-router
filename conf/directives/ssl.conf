# do not support SSLv3 or TLSv1 which are not considered PCI compliant
ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

# limit the ciphers that we'll allow
ssl_prefer_server_ciphers on;
ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

# enable OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;

# specifiy a default curve in case OpenSSL doesn't offer a good one
ssl_ecdh_curve secp384r1;

# improve SSL session caching
ssl_session_cache shared:SSL:40m;
ssl_session_timeout 4h;
ssl_session_tickets off;

# using a 2048-bit RSA key - consensus is that 4096-bit is only 16% more bits worth of security for up to ~7x the CPU cost
# when a new key is needed, then run: $ openssl dhparam 2048 -out dhparam.pem
ssl_dhparam dhparam.pem;

# Next steps based on: https://github.com/GUI/lua-resty-auto-ssl

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 1m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
  auto_ssl = (require "resty.auto-ssl").new()

  auto_ssl:set("allow_domain", function(domain)
    return ngx.re.match(domain, "(diana.is)$", "ijo")
  end)

  auto_ssl:set("dir", "/etc/resty-auto-ssl")

  auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.file")

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

# these are the fallback certs - they will be overriden later by Let's Encrypt
ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
